/****************************************************
	文件：ExtendMath.Advanced.Calcus.cs
	作者：lenovo
	邮箱: 
	日期：2024/6/17 10:4:50
	功能：高等数学 微积分
*****************************************************/

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using static ExtendMath;
using Random = UnityEngine.Random;

public static partial class ExtendCalclus
{
	/// <summary>
	/// 积分
	/// 为了方便找
	/// 搞一些常见的
	/// </summary>
	public static string Integrals(this float num, float min, float max, E积分符号 para)
	{

		switch (para)
		{
			case E积分符号.omn: return ""; break;
			case E积分符号.summa: return ""; break;
			default: throw new System.Exception("异常"); break;
		}

	}
	/// <summary>
	/// 求导
	/// 为了方便找
	/// 搞一些常见的
	/// </summary>

	public static string Derivative(this float num, E求导 para)
	{
		//
		switch (para)
		{
			case E求导.加法求导法则: return "(u+v)'=u'+v'";
			case E求导.减法求导法则: return "(u-v)'=u'-v'";
			case E求导.乘法求导法则: return "(uv)'=u'v+uv',(Cv)'=Cv'";
			case E求导.除法求导法则: return "(u/v)'=(u'v-uv')/v²";
			//
			case E求导.幂函数求导: return "(x.Pow(a))'=ax.Pow(a-1)";
			case E求导.指数求导: return "(a.Pow(x))'=a.Pow(x)*a.Ln";
			case E求导.幂指函数求导: return "(x.Pow(x))'=";
			case E求导.对数求导: return "(a.Ln)'= 1/x";
			//
			case E求导.三角函数求导: return "x.Sin'=x.Cos, x.Cos'=-x.Sin, x.Tan'=x.Sec.Pow2...";
			//
			default: throw new System.Exception("未定义异常");
		}

	}
}

public static partial class ExtendCalclus //高等数学
{

	static void A1()
	{


	}


	#region 显示
	public interface IAdd
	{
		string Add();
	}
	public interface ISub
	{
		string Sub();
	}
	public interface IMultiply
	{
		string Multiply();
	}
	public interface IDivide
	{
		string Divide();
	}
	#endregion

	public enum E极限运算法则//求导法则
	{
		加法法则,//lim(f(x)+g(x))=limf(x)+limg(x)；
		减法法则,//lim(f(x)-g(x))=limf(x)-limg(x)；
		乘法法则,//lim(f(x)* g(x))=limf(x)*limg(x)；
		除法法则,//lim(f(x)/g(x))=limf(x)/limg(x)，其中limg(x)不等于0。
		洛必达法则,
		等价无穷小代换,
		泰勒公式
	}

	/// <summary></summary>
	public enum E积分符号
	{
		/// <summary>∮</summary>
		曲线积分符号,
		/// <summary>∯</summary>
		面积分符号,
		/// <summary>∰</summary>
		体积分符号,
		//
		/// <summary>莱布尼茨用的,omn.l”表示l的总和,omn为omnia（意即所有、全部）之缩写</summary>
		omn,
		/// <summary>莱布尼茨用的,∫，以“∫l”表示所有l的总和（Summa）</summary>
		summa,
		/// <summary>
		/// PI/2*f(x)=1/2,
		/// <br/>∫[0,PI]f(x)+etc
		/// <para/>来自于傅立叶《热的分析理论》
		/// </summary>
		傅里叶老的,
		/// <summary>
		/// PI/2*f(x)=1/2,
		/// <br/>∫[0,PI]f(x)dx+etc
		/// <para/>来自于傅立叶《热的分析理论》
		/// </summary>
		傅里叶,
		/// <summary>
		/// <br/>∫[0,1]a.Pow(u)du=	(a-1)/a.Log
		/// </summary>
		G普兰纳,
		//
		/// <summary>∫,summa的s拉长的意思</summary>
		一重积分符号,
		/// <summary>∬</summary>
		二重积分符号,
		/// <summary>∭</summary>
		三重积分符号,


	}

	/// <summary></summary>
	public enum E求导符号
	{
		/// <summary>可导,(u+v)'=u'+v'</summary>
		prime,
		/// <summary>∆。d指微分, delta指增量。
		/// <br/>着重指因变量纵坐标的增量</summary>
		delta,
		/// <summary>可微,可微分,dy/dx。 d指微分, delta指增量。
		/// <br/>着重指因变量斜率切线的纵坐标的增量</summary>
		d,
		/// <summary>limit(x.delta(0))</summary>
		limit,
		/// <summary>∂</summary>
		偏微分符号
	}

	/// <summary>求导法则</summary>
	public enum E求导
	{
		求导法则求导,
		/// <summary>(u+v)'=u'+v'</summary>
		加法求导法则,//
		/// <summary>(u-v)'=u'-v'</summary>
		减法求导法则,//
		/// <summary>(uv)'=u'v+uv',(Cv)'=Cv'</summary>
		乘法求导法则,//
		/// <summary>(u/v)'=(u'v-uv')/v²</summary>
		除法求导法则,//
			   //
		定义法求导,
		公式法求导,
		反函数求导,
		复合函数求导,
		参数方程求导,
		/// <summary> y = (x*(y.Ln))’=ln y+xy'/y,就是原函数x,y就分不开,拆不开</summary>
		隐函数求导,
		//
		/// <summary>
		/// 用度数变化,弧长变化来代入是几何意义
		/// <para/>x.Sin'=x.Cos
		/// <br/>x.Cos'=-x.Sin
		/// <br/>x.Tan'=x.Sec.Pow2
		/// <para/>	x.Csc'=	-x.Cot * x.Csc
		/// <br/>x.Sec'= x.Tan * x.Sec
		/// <br/>x.Cot'= -(x.Csx).Pow2
		/// <para/>	x.ASin' = 1/(1-x.Pow2).Sqrt
		/// <br/>x.ACos'= -1/(1-x.Pow2).Sqrt
		/// <br/>x.ATan'= 1/(1+x.Pow2).Sqrt
		/// <para/>	x.ACsc'= -1/(  x.Abs *(x.Pow2-1).Sqrt  )
		/// <br/>x.ASec'= 1/(  x.Abs *(x.Pow2-1).Sqrt  )
		/// <br/>x.ACot'= -1/(1+x.Pow2).Sqrt
		/// </summary>
		三角函数求导,
		//
		/// <summary>(x.Ln)'=1/x</summary>
		对数求导,
		//
		/// <summary>(a.Pow(x))'=a.Pow(x) * a.Ln,幂底不变,幂指是自变量, 等于x.Exp(a)</summary>
		指数求导,
		/// <summary>(x.Pow(a))'=a*(x.Pow(a-1)),幂指不变,幂底是自变量</summary>
		幂函数求导,
		/// <summary>(x.Pow(x))'=a*(x.Pow(a-1)),幂指/幂底都是自变量</summary>
		幂指函数求导
	}

	#region 各种分
	public enum E差分
	{
		有限差分, 有限差分的导数, 有限差分商,//f(x+b)-f(x+a)
	}
	public enum E微积分
	{
		离散微积分,
		//微分和积分实际上是一对逆运算
		微积分学基本定理, 牛顿_莱布尼兹公式,
		//1700年, 现在大学里学习的大部分微积分内容已经建立起来, 其中还包括较高等的内容, 例如变分法;
		//17世纪的数学, 发生了许多深刻的、明显的变革;
		//在数学的活动范围方面, 数学教育扩大了, 从事数学工作的人迅速增加。数学着作在较广的范围内得到传播, 而且建立了各种学会;
		//在数学的传统方面, 从形的研究转向了数的研究, 代数占据了主导地位;
		力学的数学化, // 它以1687年牛顿写的自然哲学的数学原理为代表, 从三大定律出发, 用数学的逻辑推理将力学定律逐个地、必然地引申出来;
				//1705年制成了第一台可供实用的蒸汽机；1768年瓦特制成了近代蒸汽机;
				//
		洛比达,//第一本微积分课本出版于1696年
		笛沙格,//在1639年发表的一书中, 进行了的早期工作；
		帕斯卡,//于1649年制成了计算器；
		惠更斯,//1657年提出了概率论这一学科中的第一篇论文;
		伯努利家族, 隶莫弗尔, 泰勒, 麦克劳林, 克雷罗, 兰伯特,
		达朗贝尔,//分析的基础
		兰伯待,//平行公设
		拉格朗日,//位微积分
		卡诺,//的哲学思想
		蒙日,//专业化的数学家,几何学
		   //
		三角学, 解析几何学, 微积分学, 方程论, 保险统计科学, 高等函数指微分方程所定义的函数,
		几何学, 代数学, 数学的基础,
		微积分在力学的应用, 微积分在天文学的应用,
		//
		/// <summary></summary>
		曲线积分,
		/// <summary></summary>
		面积分,
		/// <summary></summary>
		体积分,
		偏微分

	}

	/// <summary></summary>
	public enum E微分
	{
		/// <summary>也叫常微分</summary>
		一元微分,
		多元微分,
		/// <summary>也叫一元微分</summary>
		常微分,
		//
		全微分,
		/// <summary>相对于全微分,PartialDerivative,
		/// <br/>几何意义表示固定面上一点的切线斜率</summary>
		偏微分,     
		//
		切线微分,

		// 更加严格的定义Δy = g(x)Δx+ο(Δx), ο(Δx)是比 Δx 高阶的无穷小
		//如果去掉ο(Δx)
		//有增量 △y = f(x₀ + △x) - f(x₀)
		//dx,就说f(x)在x₀可微
		//其中g(x)为与Δx 无关的函数。
		//dy,df(x),df,则称函数f(x)在点 x 可微，并称 g(x)Δx 为函数 f(x) 在点 x 的微分，记作 dy，即 dy = g(x)Δx，
		//当 x = x0 时，则记作 dy∣x=x0。
		//
		//设函数 y = f(x) 在某区间内有定义，x₀及 x₀ + △x 在这个区间内，如果函数的增量：△y = f(x₀ + △x) - f(x₀) 可表示为：△y = A·△x + ο(△x)，其中A是不依赖于△x的常数，那么称函数 y = f(x) 在x₀是可微的，而 A·△x 叫做函数 y = f(x) 在点 x₀ 相应于自变量增量 △x 的微分，记作dy，即：dy = A·△x （其中可看出，△y 与微分 dy 的差为高阶无穷小，即有：△y - dy = ο(△x). 函数增量△y ≠ 函数微分dy）。
		//在几何上，当 △y 是曲线上点的纵坐标增量时，dy 就是曲线的切线上点的纵坐标增量。当 △x→0 时，△y - dy = ο(△x). 故在点 x₀ 附近，可以用切线段来近似代替曲线段。
		//
		//函数可微条件
		//函数 f(x) 在点 x₀ 处可微(dy/dx) 等价于 函数 f(x) 在点 x₀ 可导(f'(x))。
		//且当函数 f(x) 在点 x₀ 处可微时，其微分一定是：dy = f'(x)·△x. 由此可得出以下结论：
		//（1）y = f(x) 在任意点 x 的微分称为 函数的微分 记作 dy 或 df(x) ，即：dy = f'(x)·△x.
		//（2）把自变量的增量 △x 称为 自变量的微分，记作 dx，即：dx = △x.则有：dy = f'(x)dx，即导数可表达为：dy / dx = f'(x)，故而导数也可称之为 微商（微分之商）。
	}


	/// <summary></summary>
	public enum E微分中值定理
	{
		//可利用导数来研究函数的性质，了解导数值和函数值之间的关系：
		/// <summary>
		/// Rolle
		/// 如果函数f(x)满足如下条件：
		/// <br/>（1）f(x) 在闭区间[a, b]上连续；
		/// <br/>（2）f(x)在开区间(a, b) 内可导；
		/// <br/>（3）f(x)在区间端点的函数值相等，即f(a)=f(b) ，
		/// <br/>那么在(a, b) 内至少有一点ξ(a&lt;ξ&lt;b)，使得函数f(x) 在该点的导数等于零，即f'(ξ)=0。 [1]
		/// </summary>
		罗尔定理,
		/// <summary>
		/// 拉氏定理、有限增量定理
		/// Lagrange, 
		/// <para/>最初形式: 函数f(x)在x和x0之间连续，f'(x)的最大值为A，最小值为B，则必取A，B中的一个值 [1][4]。
		/// <para/>现代形式: 如果函数在闭区间[a,b]上连续，在开区间(a,b)上可导，那么在开区间(a,b)内至少存在一点ξ 
		/// <br/>使得 f'(ξ)=(f(b)-f(a)/(b-a))
		/// <para/>函数y=f(x)在连续可导区间[a,b]内,区间端点的连线斜率,在区间内总有点的斜率可以相等(切线平行)
		/// </summary>
		拉格朗日中值定理,
		/// <summary>
		/// <br/>广义的拉格朗日中值定理
		/// <br/>参数方程下拉格朗日中值定理的表达形式 (x,y)变成(g(x),f(x))
		/// <br/>Cauchy
		/// <para/>柯西（Cauchy）中值定理：设函数f(x) g(x) 满足
		/// <br/>⑴在闭区间[a,b]上连续；
		/// <br/>⑵在开区间(a,b)内可导；
		/// <br/>⑶对任意x∈(a,b) ，g'(x)!=0 
		/// <br/>那么在 内至少有一点 ξ，使得 (f(b)-f(a))/(g(b)-g(a))=f'(ξ)/g'(ξ)成立 [2]
		/// <para/>
		///<br/>f(b)-f(a) ,区间[a,b]在y轴上的增量
		///<br/>g(b)-g(a) ,区间[a,b]在x轴上的增量
		///<br/>f'(ξ)/g'(ξ) ,ξ点的斜率
		///<br/>所以是曲线(x=g(x),y=f(x))连续可导区间的端点斜率,在区间内总有点可以相等(即切线平行)
		/// </summary>
		柯西中值定理,
        //
        /// <summary>
        /// 泰勒中值定理,泰勒定理,泰勒公式,泰勒不等式
        /// <para/>来源:
        /// <br/>从格雷戈里——牛顿插值公式发展而来
        /// <br/>泰勒《正的和反的增量方法》，陈述了泰勒定理。
        /// <br/>1772年，拉格朗日强调了泰勒公式的重要性，称其为微分学基本定理，
        /// <br/>19世纪20年代，柯西完成内容,泰勒定理的证明中并没有考虑级数的收敛性。
        /// <br/>泰勒定理开创了有限差分理论，使任何单变量函数都可以展开成幂级数
        /// <para/>内容:     
        /// <br/>泰勒公式是是一个用函数在某点的信息描述其附近取值的公式
        /// <br/>将一些复杂的函数逼近近似地表示为简单的多项式函数
        /// <br/>将非线性问题化为线性问题，且具有很高的精确度
        /// <br/>用多项式来"逼近"非多项式
        /// <para/>如果函数足够光滑,在已知函数某一点各阶导数的前提下,
        /// <br/>泰勒公式可以利用这些导数值作为系数构建一个多项式来近似该函数在这一点的邻域中的值。
        /// <para/>地位:泰勒为有限差分理论的奠基者
        /// <para/>特点:集中体现了微积分“逼近法”的精髓
        /// <para/>应用:数学分析,函数极限, 估计误差,近似计算
        /// <br/>泰勒公式可以应用于求极限、判断函数极值、求高阶导数在某点的数值、判断广义积分收敛性、近似计算、不等式证明等方面。
        /// </summary>
        泰勒中值定理,
		洛必达法则,
		//


	}
	public enum E泰勒中值定理
	{
		//f(x)=f(x0)+f'(x0)*(x-x0)+o(x-x0)
		//
		//f(x)(n阶泰勒公式, n阶麦克劳林公式)
		//=f(x0)/0!
		//+f'(x0)*(x-x0)/1!
		//+f''(x0)*(x-x0)/2!
		//+f'''(x0)*(x-x0)/3!
		//+f''''(x0)*(x-x0)/4! (n次泰勒多项式)
		//+.......
		//+f上标n(x0)*(x-x0)/n!(n阶泰勒余项)
		//+R下标n(x)

		n阶泰勒公式,
		n阶泰勒余项,
		n次泰勒多项式,
        /// <summary>
		/// 定性的, 如求未定式极限及估计无穷小阶数等问题
        /// <para/>o(x.Pow(n))或o((x-x0).Pow(n))</summary> 
        皮亚诺余项,
        /// <summary>
		/// 定量的, 如利用泰勒公式近似计算函数值
        /// <para/>o(x.Pow(n))或( f.Pow(n+1)(Θx)/(n+1)! )/x.Pow(n+1)(0小于Θ小于1)</summary>
        拉格朗日余项
    }



	/// <summary>Integrals</summary>
	public enum E积分
	{
		对数积分,
		//
		//它们仅仅在数学上有一个计算关系（牛顿-莱布尼茨公式）。
		/// <summary>若定积分存在，则它是一个具体的数值</summary>
		定积分,
		/// <summary>不定积分是一个函数表达式</summary>
		不定积分,
		//
		反常积分

	}


	public enum E微积分内容
	{
		//在历史上，积分观念的形成比微分还要早－－这跟课程上往往先讨论微分再讨论积分刚好相反。
		//十七世纪中叶，积分微分「微积分基本定理」或「牛顿－莱布尼茨公式」联系起来，说明求积分基本上是求微分之逆，求微分也是求积分之逆。
		//
		//设函数y = f(x)在x的邻域内有定义，x及x + Δx在此区间内。
		//如果函数的增量Δy = f(x + Δx) - f(x)可表示为 Δy = AΔx + o(Δx)（其中A是不随Δx改变的常量，但A可以随x改变），而o(Δx)是比Δx高阶的无穷小（注：o读作奥密克戎，希腊字母）那么称函数f(x)在点x是可微的，且AΔx称作函数在点x相应于因变量增量Δy的微分，记作dy，即dy = AΔx。函数的微分是函数增量的主要部分，且是Δx的线性函数，故说函数的微分是函数增量的线性主部（△x→0）。
		//自变量x的增量 Δx称为自变量的微分，记作dx，即dx = Δx。
		//dy/dx=f'(x),因变量的微分与自变量的微分之商==微商==导数
		//


	}

	public enum E微分内容
	{
		//阿基米德（Archimedes）已经懂得用无穷分割的方法正确地计算一些面积，这跟现代积分的观念已经很相似。
		//德谟克利特提出原子论,他认为宇宙万物是由极细的原子构成
		//《庄子．天下篇》中所言的「一尺之捶，日取其半，万世不竭」
		//芝诺（Zeno）几个著名的悖论：其中一个悖论说一个人永远都追不上一只乌龟，因为当那人追到乌龟的出发点时，乌龟已经向前爬行了一小段路，当他再追完这一小段，乌龟又已经再向前爬行了一小段路。芝诺说这样一追一赶的永远重覆下去，任何人都总追不上一只最慢的乌龟－－当然，从现代的观点看，芝诺说的实在荒谬不过；他混淆了「无限」和「无限可分」的概念。人追乌龟经过的那段路纵然无限可分，其长度却是有限的；所以人仍然可以以有限的时间，走完这一段路。然而这些荒谬的论述，开启了人类对无穷、极限等概念的探讨，对后世发展微积分有深远的历史意味。
		//
		//费马（Fermat）在一封给罗贝瓦（Roberval）的信中，提及计算函数的极大值和极小值的步骤，而这实际上已相当于现代微分学中所用，设函数导数为零，然后求出函数极点的方法。
		//巴罗（Barrow）亦已经懂得透过「微分三角形」（相当于以dx、dy、ds为边的三角形）求出切线的方程，这和现今微分学中用导数求切线的方法是一样的。
		//
		//微分概念是在解决直与曲的矛盾中产生的，在微小局部可以用直线去近似替代曲线，它的直接应用就是函数的线性化。
		//微分具有双重意义：它表示一个微小的量，因此就可以把线性函数的数值计算结果作为本来函数的数值近似值，这就是运用微分方法进行近似计算的基本思想。
		//一元微积分中，可微可导等价。记A·△X = dy，则dy = f′(X)dX。例如：d(sinX)=cosXdX。
		//
		//dy的解释
		//当自变量X改变为X+△X时，相应地函数值由f(X)改变为f(X+△X)，
		//如果存在一个与△X无关的常数A，使f(X+△X)-f(X)和A·△X之差是△X→0关于△X的高阶无穷小量，
		//则称A·△X是f(X)在X的微分，记为dy，并称f(X)在X可微。	
	}


	/// <summary>Integrals</summary>

	public enum E积分内容
	{
		//1615年，开普勒（Kepler）把酒桶看作一个由无数圆薄片积累而成的物件，从而求出其体积。
		//伽利略（Galileo）的学生卡瓦列里（Cavalieri）即认为一条线由无穷多个点构成；一个面由无穷多条线构成；一个立体由无穷多个面构成。
		//
		/// <summary>积分变换无论在数学理论或其应用中都是一种非常有用的工具。最重要的积分变换有傅里叶变换、拉普拉斯变换。由于不同应用的需要，还有其他一些积分变换，其中应用较为广泛的有梅林变换和汉克尔变换，它们都可通过傅里叶变换或拉普拉斯变换转化而来。</summary>
		积分变换,
		/// <summary>积分不等式是微积分学中的一类重要不等式，也为解决微分方程等方面的问题提供了 富有成效的理论工具。主要有杨不等式，施瓦兹不等式，闵可夫斯基不等式，延森不等式等。</summary>
		积分不等式,
		/// <summary>积分法 integral method； 是通过磁异常的积分运算求得磁性体产状的定量解释推断方法。通过这种运算可以直接或间接的求得磁性体的产状。积分法一般利用磁异常曲线的一段或全部，有利于消除或压制局部干扰，计算结果较可靠。这种解释推断方法要求异常曲线要观测到正常场，因而相邻磁性体的干扰明显。同时，还要求计算之前必须确定磁性体的几何形状，才能正确地选择计算公式。</summary>
		积分法,
		/// <summary>积分方程是含有对未知函数的积分运算的方程，与微分方程相对。许多数学物理问题需通过积分方程或微分方程求解。积分方程是近代数学的一个重要分支。数学、自然科学和工程技术领域中的许多问题都可以归结为积分方程问题。正是因为这种双向联系和深入的特点，积分方程论得到了迅速地发展，成为包括众多研究方向的数学分支。</summary>
		积分方程,
		/// <summary>积分几何数学中通过各种积分研究图形性质的一门学科，本质上属于整体微分几何范畴。它起源于几何概率的研究，其发展也始终与几何概率相联系。积分几何的研究从二维欧几里得平面、三维欧几里得空间开始，逐步拓广到高维欧几里得空间和非欧几里得空间，然后概括为满足一定条件的齐性空间。</summary>
		积分几何,
		/// <summary>积分微分方程是一类未知函数同时出现在积分和微分号下的方程。</summary>
		积分微分方程,
		/// <summary>对于微分方程M(x, y)dx+N(x, y)dy = 0，如果存在连续可微函数μ(x, y)，可以使μMdx+μNdy = 0成为恰当方程，即μMdx+μNdy = du，则称μ为该微分方程的积分因子。求解积分因子的常用方法主要由观察法、积分法和分组法。</summary>
		积分因子,
		/// <summary>积分流形(integral manifold)是一类子流形。它是由对合分布确定的子流形。流形是一类拓扑空间，它在每一点的附近都与欧氏空间同胚。一般的流形概念，起始于对于可微流形的研究，在点集拓扑中已经熟悉把一元或多元连续函数的概念，推广为拓扑空间之间连续映射的概念。切空间是微分流形在一点处所联系的向量空间，欧氏空间中光滑曲线的切线、光滑曲面的切平面的推广。</summary>
		积分流形,
		/// <summary>积分符号（Signs for Definite Integrals）是数学中的常用符号。现代的积分符号由约翰·伯努利于1698年改良并发展</summary>
		积分符号,
	}

	#endregion

	public enum E矩阵
	{
		增广矩阵, 系数矩阵, 阶梯形矩阵,
		高斯赛德尔迭代矩阵, 雅可比迭代矩阵,
		下三角矩阵, 上三角矩阵,
	}


	public enum E度量
	{
		富比尼_施图迪度量
	}
	public enum E积
	{
		积, 矢积, 外积, 向量积, 叉积, 叉乘,// ab*sin
		标积, 内积, 数量积, 点积,  //abcos
	}
	public enum E几何
	{
		微分几何,
		代数几何,
		欧氏几何,
		非欧几何, 黎曼几何,
		罗巴切夫斯基几何
	}




	public enum E极限
	{
		数列的极限, 函数的极限
	}
	public enum E杂
	{
		极限,
		无穷小, 无穷大,
		极限存在准则, 两个重要极限,
		无穷小的比较,
		函数的连续性与间断点,
		连续函数的运算与初等函数的连续性,
		闭区间上连续函数的性质,
	}

	//第二章 导数与微分
	//第一节 导数概念
	//第二节 函数的求导法则
	//第三节 高阶导数
	//第四节 隐函数及由参数方程所确定的函数的导数相关变化率
	//第五节 函数的微分
	//总习题二
	//第三章 微分中值定理与导数的应用
	//第一节 微分中值定理
	//第四节 函数的单调性与曲线的凹凸性
	//第五节 函数的极值与最大值最小值
	//第六节 函数图形的描绘
	//第七节 曲率
	//第八节 方程的近似解
	//总习题三
	//第四章 不定积分
	//第一节 不定积分的概念与性质
	//第二节 换元积分法
	//第三节 分部积分法
	//第四节 有理函数的积分
	//第五节 积分表的使用
	//总习题四
	//第五章 定积分
	//第一节 定积分的概念与性质
	//第二节 微积分基本公式
	//第三节 定积分的换元法和分部积分法
	//第四节 反常积分
	//* 第五节 反常积分的审敛法Γ函数
	//总习题五
	//第六章 定积分的应用
	//第一节 定积分的元素法
	//第二节 定积分在几何学上的应用
	//第三节 定积分在物理学上的应用

	//总习题六
	//第七章 微分方程
	//第一节 微分方程的基本概念
	//第二节 可分离变量的微分方程
	//第三节 齐次方程
	//第四节 一阶线性微分方程
	//第五节 可降阶的高阶微分方程
	//第六节 高阶线性微分方程
	//第七节 常系数齐次线性微分方程
	//第八节 常系数非齐次线性微分方程
	//* 第九节 欧拉方程
	//总习题七
	//附录Ⅰ 二阶和三阶行列式简介
	//附录Ⅱ 基本初等函数的图形
	//附录Ⅲ 几种常用的曲线
	//附录Ⅳ 积分表



	//《高等数学（第七版）》下册目录
	//第八章 向量代数与空间解析几何
	//第一节 向量及其线性运算
	//第二节 数量积 向量积*混合积
	//第三节 平面及其方程
	//第四节 空间直线及其方程
	//第五节 曲面及其方程
	//第六节 空间曲线及其方程
	//总习题八
	//第九章 多元函数微分法及其应用
	//第一节 多元函数的基本概念
	//第二节 偏导数
	//第三节 全微分
	//第四节 多元复合函数的求导法则
	//第五节 隐函数的求导公式
	//第六节 多元函数微分学的几何应用
	//第七节 方向导数与梯度
	//第八节 多元函数的极值及其求法
	//∗第九节 二元函数的泰勒公式
	//∗第十节 最小二乘法
	//总习题九
	//第十章 重积分
	//第一节 二重积分的概念与性质
	//第二节 二重积分的计算法
	//第三节 三重积分
	//第四节 重积分的应用
	//∗第五节 含参变量的积分
	//总习题十
	//第十一章 曲线积分与曲面积分
	//第一节 对弧长的曲线积分
	//第二节 对坐标的曲线积分
	//第三节 格林公式及其应用
	//第四节 对面积的曲面积分
	//第五节 对坐标的曲面积分
	//第六节 高斯公式* 通量与散度
	//第七节 斯托克斯公式*环流量与旋度
	//总习题十一
	//第十二章 无穷级数
	//第一节 常数项级数的概念和性质
	//第二节 常数项级数的审敛法
	//第三节 幂级数
	//第四节 函数展开成幂级数
	//第五节 函数的幂级数展开式的应用
	//*第六节 函数项级数的一致收敛性及一致收敛级数的基本性质
	//第七节 傅里叶级数
	//第八节 一般周期函数的傅里叶级数
	//
}

public static partial class ExtendCalclus
{
	/// <summary>
	/// 数值微分Func&lt;double, double&gt; function = x =&gt; x * x; 
	/// <br/>double x = 2.0; // 计算x点的微分
	/// <br/>double derivative = NumericalDifferentiation.Differentiate(function, x);
	/// </summary>
	public static double Differentiate(Func<double, double> function, double x, double h = 1e-5)
	{
		return (function(x + h) - function(x)) / h;
	}


	/// <summary>
	/// 定积分 积分下界 ,精度
	/// </summary>
	public static double DefiniteIntegral(Func<double, double> function, double left, double right, double precision)
	{
		double result = 0;
		double n = (right - left) / precision;

		for (int i = 0; i < n; i++)
		{
			double x = left + i * precision;
			result += function(x) * precision;
		}

		return result;
	}
	public static double 分部积分法()
	{
		return 0;
	}

	public static double 换元积分法()
	{
		return 0;
	}
	public static double 积分公式法()
	{
		return 0;
	}
	public static double 积分表()
	{
		return 0;
	}

}



